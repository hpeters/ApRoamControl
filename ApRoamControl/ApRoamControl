#!/bin/bash

renice -1 $$ >/dev/null 2>&1
echo $$ > /var/run/ApRoamControl.pid

#### Paths. ####

aprdir='/tmp/ApRoam'
controllog='control.log'
deauthlog='deauth.log'
logdir='/var/log/ApRoam'

#### SIGNAL PROCESSING FUNCTION ####

sig_proc() {
	# On the ap the station is currently connected to calculate the snr difference between now and the previously detected snr.
	if [ -f $aprdir/${2}snr.$1 ]; then
		PREVSNR=`cat $aprdir/${2}snr.$1`
		SNR=$3
		if [ "$SNR" -lt "$PREVSNR" ]; then
			SNRDIFF=$(($PREVSNR-$SNR))
		else
			SNRDIFF=0
		fi
	else
		SNRDIFF=0
	fi
	# On the ap the station is currently recieving a stronger snr calculate the snr difference between now and the previously detected snr.
        if [ -f $aprdir/${4}snr.$1 ]; then
		PREVSNR2=`cat $aprdir/${4}snr.$1`
                SNR2=$5
                if [ "$SNR2" -gt "$PREVSNR2" -a "$PREVSNR2" -ne "0" ]; then
                        SNR2DIFF=$(($SNR2-$PREVSNR2))
                else
                        SNR2DIFF=0
                fi
        else
                SNR2DIFF=0
        fi
	# Calculate whether to deauthenticate or not.
	if [ "$(($SNRDIFF-$(($SNR2DIFF/3))))" -ge "0" -a "$(($SNR2DIFF-$(($SNRDIFF/3))))" -ge "0" ]; then
		if [ "$SNRDIFF" -le "$MAXSNRDROP" ]; then
			DEAUTHSTATION=1
		else
			DEAUTHSTATION=0
		fi
	elif [ "$SNRDIFF" -le "$SNRDROP" -a "$SNR2DIFF" -le "$MAXSNRDIFF" ]; then
		DEAUTHSTATION=1
	else
		DEAUTHSTATION=0
	fi
}

#### 1=ENABLE, 0=DISABLE LOGGING ####
CONTROLLOG='1'
DEAUTHLOG='1'

#### INTIALIZE ARRAYS, VARIABLES AND CLEAN UP. ####
declare -a APADDRESS
declare -a APMAC
declare -a APNOISE
declare -a APSNR
declare -a APSTATIONS
APCOUNT='3'
APADDRESS[1]='192.168.1.2'
APADDRESS[2]='192.168.1.4'
APADDRESS[3]='192.168.1.8'
APMAC[1]='f8:1a:67:32:f0:cd'
APMAC[2]='14:cc:20:5e:94:03'
APMAC[3]='c4:6e:1f:5b:2a:40'
DEAUTHPORT='555'
DEAUTHSTATION='1'
DEFAULTNOISE='-88'
KEEPALIVELOOP='10'
LOOPTIME='10'
MAXSNR='80'
MAXSNRDIFF='20'
MAXSNRDROP='25'
RESTARTED=$1
if [ "$RESTARTED" = "" ]; then
RESTARTED='0'
fi
SNRDROP='12'
# KEEPALIVE sets how often you ping stations. Pinging improves signal detection but at the cost of increased battery consumption by the stations.
# To set KEEPALIVE: 0=Ping disabled 10=Ping every 10 seconds 20=Ping every 20 seconds 30=Ping every 30 seconds etc.
KEEPALIVE='0'
if [ "$RESTARTED" -ne "1" ]; then
	rm -f $aprdir/AP*snr.*
	rm -f $aprdir/AP*prevnoise
	rm -f $aprdir/deauth
	mkdir -p $aprdir
fi
if [ "$CONTROLLOG" -eq "1" ]; then
	mkdir -p $logdir
	touch $logdir/$controllog
fi
if [ "$DEAUTHLOG" -eq "1" ]; then
	mkdir -p $logdir
	touch $logdir/$deauthlog
fi

#### MAIN LOOP ####

# Do To A Bash Or Supporting Program Bug ApRoamControl Gets Slower And Uses More Cpu Over time.
# So Set ApRoamControl To Restart Every Half An Hour.
RESTART=$((60/$LOOPTIME))
RESTART=$(($RESTART*30))
MAINCOUNT='1'
while [ "$MAINCOUNT" -le "$RESTART" ]
do
	STARTTIME=`date +%s`
	if [ "$CONTROLLOG" -eq "1" ]; then
		DATE=`date`
		printf "%b-------------------- $DATE --------------------\n" >> $logdir/$controllog
	fi

	#### RETRIEVE STATION AND SURVEY DATA. ####

	COUNT='1'
	STATIONS=''
	while [ "${COUNT}" -le "$APCOUNT" ]
	do
		## Retrieve Survey Dump. ##
		APNOISE[${COUNT}]=`grep -A1 'in use' $aprdir/AP${COUNT}/survey.dump 2>/dev/null | grep noise: | awk '{print $2}'`
		if [ "${APNOISE[${COUNT}]}" = "" ]; then
			if [ -f $aprdir/AP${COUNT}prevnoise ]; then
				APNOISE[${COUNT}]=`cat $aprdir/AP${COUNT}prevnoise`
			else
				APNOISE[${COUNT}]=$DEFAULTNOISE
			fi
		else
			echo ${APNOISE[${COUNT}]} > $aprdir/AP${COUNT}prevnoise
		fi
		rm -f $aprdir/AP${COUNT}/survey.dump >/dev/null 2>&1
                if [ "$COUNT" -lt "10" ]; then
                        SURPORT="70${COUNT}"
                else
                        SURPORT="7${COUNT}"
                fi
		# Kill Any Previous APRoamSur Processes
		pkill -f -o "nc -l -p ${SURPORT}"
		ApRoamSur ${APADDRESS[${COUNT}]} $SURPORT AP${COUNT} $LOOPTIME >/dev/null 2>&1 &
		## Retrieve Access Station Dump. ##
		APSTATIONS[${COUNT}]=`grep "Station" $aprdir/AP${COUNT}/station.dump 2>/dev/null | awk '{print $2}'`
		rm -f $aprdir/AP${COUNT}/station.dump >/dev/null 2>&1
		if [ "$COUNT" -lt "10" ]; then
			STAPORT="60${COUNT}"
		else
			STAPORT="6${COUNT}"
		fi
		# Kill Any Previous APRoamSta Processes.
		pkill -f -o "nc -l -p ${STAPORT}"
		ApRoamSta ${APADDRESS[${COUNT}]} $STAPORT AP${COUNT} $LOOPTIME >/dev/null 2>&1 &
		# Combine All Stations.
		if [ "$STATIONS" != "" ]; then
			STATIONS="${STATIONS} ${APSTATIONS[${COUNT}]}"
		else
			STATIONS="${APSTATIONS[${COUNT}]}"
		fi
		COUNT=$(($COUNT+1))
	done

	# Strip Out Duplicates.
	STATIONS=`echo "$STATIONS" | grep -Eo ..\(\:..\){5} | awk '!a[$0]++'`

	# Get Station Count.
	STATIONCOUNT=`echo "$STATIONS" | grep -Eoc ..\(\:..\){5}`

	#### PING STATIONS TO IMPROVE CHANCE OF RETRIEVING A SIGNAL. ####
	if [ "$KEEPALIVELOOP" -ge "$KEEPALIVE" -a "$KEEPALIVE" -ne "0" ]; then
		KEEPALIVELOOP=10
		COUNT=$STATIONCOUNT
		while [ "$COUNT" -gt "0" ]
		do
			STATION=`echo $STATIONS | awk -v x=$COUNT '{print $x}'`
			# First Try Retrieving Ip Address From Dnsmasq Lease File.
			ip=`cat /var/lib/misc/dnsmasq.leases | grep -m1 "$STATION" | awk '{print $3}'`
			if [ "$ip" = "" ]; then
				# Second Try Retrieving Ip Address From Arp Cache.
				ip=`cat /proc/net/arp | grep -m1 "$STATION" | awk '{print $1}'`
				if [ "$ip" = "" ]; then
					# Third Try Pinging Every Ip Address On Subnet.
					fping -b1 -c1 -i1 -q -r0 -t1 -g 192.168.1.0/24 >/dev/null 2>&1
					COUNT=0
				else
					ping -i .05 -c 1 -s 0 $ip >/dev/null 2>&1 &
				fi
			else
				ping -i .05 -c 1 -s 0 $ip >/dev/null 2>&1 &
			fi
			COUNT=$(($COUNT-1))
		done
	elif [ "$KEEPALIVE" -eq "0" ]; then
		KEEPALIVELOOP=10
	else
		KEEPALIVELOOP=$(($KEEPALIVELOOP+10))
	fi

	#### RETRIEVE NETWORK DATA AND DO PREPROCESSING. ####

        COUNT='1'
        while [ "${COUNT}" -le "$APCOUNT" ]
        do
		touch $aprdir/AP${COUNT}/network.lock >/dev/null 2>&1
		COUNT=$(($COUNT+1))
	done
	sleep .25

        COUNT='1'
        while [ "${COUNT}" -le "$APCOUNT" ]
        do
		# Preprocess Network Data By Greping Out Unwanted Packets.
		tcpdump -e -t -r $aprdir/AP${COUNT}/AP${COUNT}_network.dump 2>/dev/null > $aprdir/AP${COUNT}_network.dump
		rm -f $aprdir/AP${COUNT}/network.lock >/dev/null 2>&1
                if [ "$COUNT" -lt "10" ]; then
                        SRVPORT="40${COUNT}"
                else
                        SRVPORT="4${COUNT}"
                fi
		# Kill Any Previous APRoamSrv Processes.
		pkill -f -o "ApRoamSrv ${APADDRESS[${COUNT}]} ${SRVPORT} AP${COUNT} ${LOOPTIME}"
		pkill -f -o "nc -l -p ${SRVPORT}"
		ApRoamSrv ${APADDRESS[${COUNT}]} $SRVPORT AP${COUNT} $LOOPTIME >/dev/null 2>&1 &
		COUNT=$(($COUNT+1))
	done

	#### RETRIEVE STATION SIGNAL VALUES. ####

	while [ "$STATIONCOUNT" -gt "0" ]
	do
		APSNRDIFF='0'
		DEAUTHSTATION='-1'
		SNRDIFF='-1'
		SNR2DIFF='-1'
		STATION=`echo $STATIONS | awk -v x=$STATIONCOUNT '{print $x}'`
		CONNECTEDTOAP=''

		#### DETECT THE ACCESS POINT THE STATION IS CONNECTED TO, RETRIEVE THE STATIONS SIGNAL LEVELS ON THE ACCESS POINTS AND CALCULATE THE SIGNAL TO NOISE RATIOS. ####

		CONNECTEDAPMAC=''
		COUNT='1'
		while [ "${COUNT}" -le "$APCOUNT" ]
		do
			# Detect The Access Point The Station Is Connected To.
			CONNECTEDTOAP=`echo "${APSTATIONS[${COUNT}]}" | grep -c $STATION`
                        if [ "$CONNECTEDTOAP" -gt "0" ]; then
                                APCONNECTED="${COUNT}"
				CONNECTEDAPMAC="${APMAC[${COUNT}]}"
                        fi
			# Retrieve The Stations Signal Levels On The Access Points And Calculate The Signal To Noise Ratios.
			APSIGNAL=`grep "SA:${STATION}" $aprdir/AP${COUNT}_network.dump 2>/dev/null | grep "DA:${CONNECTEDAPMAC}" | grep -E -o "\-[0-9]{1,2}dB" | cut -d 'd' -f1  | tail -1`
			if [ "$APSIGNAL" = "" ]; then
				APSNR[${COUNT}]=0
			elif [ "$APSIGNAL" -le "${APNOISE[${COUNT}]}" ]; then
				APSNR[${COUNT}]=0
			else
				APSNR[${COUNT}]=`echo $((${APNOISE[${COUNT}]}-$APSIGNAL)) | sed 's/-//'`
			fi
			COUNT=$(($COUNT+1))
		done

		APCONNECTEDSNR="${APSNR[${APCONNECTED}]}"

		#### PREVENT STATIONS FROM CONSTANTLY HOPPING AROUND DIFFERENT ACCESS POINTS DO TO SIMULAR SIGNAL TO NOISE LEVELS. ####

		ADJUST='0'
		if [ "${APCONNECTEDSNR}" -ge "35" ]; then
			ADJUST=99
		elif [ "${APCONNECTEDSNR}" -ge "30" ]; then
			ADJUST=18
		elif [ "${APCONNECTEDSNR}" -ge "25" ]; then
			ADJUST=15
		elif [ "${APCONNECTEDSNR}" -ge "20" ]; then
			ADJUST=10
		elif [ "${APCONNECTEDSNR}" -gt "0" ]; then
			ADJUST=8
		fi

		#### LOG. ####
		if [ "$CONTROLLOG" -eq "1" ]; then
			printf "%b \n" >> $logdir/$controllog
			printf "%bSTATION = $STATION\n" >> $logdir/$controllog
			COUNT='1'
			while [ "${COUNT}" -le "$APCOUNT" ]
			do
				printf "AP${COUNT} SNR = ""%6s\n" "${APSNR[${COUNT}]} dBm" >> $logdir/$controllog
				COUNT=$(($COUNT+1))
			done
			printf "%bCONNECTED TO ACCESS POINT        = AP${APCONNECTED}\n" >> $logdir/$controllog
		fi

		#### DETECT IF THERE IS A STRONGER ACCESS POINT COMPARED TO THE CURRENTLY CONNECTED ONE. ####

		APSTRONGERSNR='0'
		COUNT='1'
		while [ "${COUNT}" -le "$APCOUNT" ]
        	do
			if [ "${APSNR[${COUNT}]}" -gt "${APCONNECTEDSNR}" ]; then
				if [ "${APSNR[${COUNT}]}" -gt "${APSTRONGERSNR}" ]; then
					APSTRONGERSNR="${APSNR[${COUNT}]}"
					APSTRONGER="${COUNT}"
				fi
			fi
			COUNT=$(($COUNT+1))
		done

		#### COMPARE SIGNAL LEVELS AND SEND DEAUTHENTICATION TO THE STATION IF ANOTHER ACCESS POINT HAS A STRONGER SIGNAL. ####

		if [ "${APSTRONGERSNR}" -gt "$((${APCONNECTEDSNR}+$ADJUST))" -a "${APSTRONGERSNR}" -ne "0" -a "${APCONNECTEDSNR}" -ne "0" ]; then
                                if [ "${APSTRONGERSNR}" -le "${MAXSNR}" ]; then
                                        APSNRDIFF=$((${APSTRONGERSNR}-${APCONNECTEDSNR}))
                                        sig_proc "$STATION" "AP${APCONNECTED}" "${APCONNECTEDSNR}" "AP${APSTRONGER}" "${APSTRONGERSNR}"
                                        if [ "$DEAUTHSTATION" -eq "1" ]; then
						if [ "$CONTROLLOG" -eq "1" ]; then
                                                	printf "%bAP${APCONNECTED}                              = DEAUTHENTICATING!\n" >> $logdir/$controllog
						fi
                                                echo "$STATION" | nc -q0 ${APADDRESS[${APCONNECTED}]} $DEAUTHPORT 2>/dev/null &
                                        fi
                                        if [ "${APCONNECTEDSNR}" -ne "$SNR" ]; then
						APSNR[${APCONNECTED}]=$SNR
						if [ "$CONTROLLOG" -eq "1" ]; then
                                                	printf "AP${APCONNECTED} SNR ADJUSTMENT               = ""%6s\n" "$SNR dBm" >> $logdir/$controllog
						fi
                                        fi
                                        if [ "${APSTRONGERSNR}" -ne "$SNR2" ]; then
                                                APSNR[${APSTRONGER}]=$SNR2
						if [ "$CONTROLLOG" -eq "1" ]; then
                                                	printf "AP${APSTRONGER} SNR ADJUSTMENT                = ""%6s\n" "$SNR2 dBm" >> $logdir/$controllog
						fi
                                        fi
                                else
					if [ "$CONTROLLOG" -eq "1" ]; then
                                        	printf "AP${APSTRONGER} SNR                         = ""%6s\n" "$SNR2 dBm EXCEEDES THE MAX $MAXSNR dBm ALLOWED NOT DEAUTHENTICATING!" >> $logdir/$controllog
					fi
                                fi
		fi

		#### LOG. ####

		if [ "$DEAUTHSTATION" -ne "-1" -a "$DEAUTHLOG" -eq "1" ]; then
			DATE=`date`
			printf "%b-------------------- $DATE --------------------\n\n" >> $logdir/$deauthlog
			if [ "$DEAUTHSTATION" -eq "0" ]; then
				printf "%b                          NOT DEAUTHENICATED!\n\n" >> $logdir/$deauthlog
			fi
			if [ "$DEAUTHSTATION" -eq "1" ]; then
				printf "%b                           DEAUTHENICATED!\n\n" >> $logdir/$deauthlog
			fi
			printf "%bSTATION = $STATION\n" >> $logdir/$deauthlog
			COUNT='1'
			while [ "${COUNT}" -le "$APCOUNT" ]
			do
				printf "AP${COUNT} = ""%6s\n" "${APSNR[${COUNT}]} dBm" >> $logdir/$deauthlog
				COUNT=$(($COUNT+1))
			done
			printf "%bCONNECTED TO ACCESS POINT        = AP${APCONNECTED}\n" >> $logdir/$deauthlog
			printf "AP${APCONNECTED} TO AP${APSTRONGER} SNR DIFF              = ""%6s\n" "$APSNRDIFF dBm" >> $logdir/$deauthlog
			if [ "$APSTRONGERSNR" -gt "0" ]; then
				printf "AP${APSTRONGER} SNR THRESHOLD ADJUSTMENT     = ""%6s\n" "$ADJUST dBm" >> $logdir/$deauthlog
			fi
			if [ "$DEAUTHSTATION" -eq "0" -a "$SNRDIFF" -lt "$MAXSNRDROP" -a "$SNRDIFF" -gt "$SNRDROP" ]; then
                                printf "AP MAXIMUM SNR DROP ALLOWED      = ""%6s\n" "$SNRDROP dBm" >> $logdir/$deauthlog
                        fi
			if [ "$DEAUTHSTATION" -eq "0" -a "$SNRDIFF" -gt "$MAXSNRDROP" ]; then
				printf "AP MAXIMUM SNR DROP ALLOWED      = ""%6s\n" "$MAXSNRDROP dBm" >> $logdir/$deauthlog
			elif [ "$DEAUTHSTATION" -eq "0" -a "$SNRDIFF" -le "$SNRDROP" ]; then
                                printf "AP MAXIMUM SNR DIFF ALLOWED      = ""%6s\n" "$MAXSNRDIFF dBm" >> $logdir/$deauthlog
                        fi
			printf "AP${APCONNECTED} CUR TO PREV SNR DIFF         = ""%6s\n" "$SNRDIFF dBm" >> $logdir/$deauthlog
			printf "AP${APSTRONGER} CUR TO PREV SNR DIFF         = ""%6s\n\n" "$SNR2DIFF dBm" >> $logdir/$deauthlog
			printf "%b----------------------------------------------------------------------\n" >> $logdir/$deauthlog
			printf "%b \n" >> $logdir/$deauthlog
		fi

		if [ "$CONTROLLOG" -eq "1" ]; then
			if [ "$APSNRDIFF" -gt "0" ]; then
				printf "AP${APCONNECTED} TO AP${APSTRONGER} SNR DIFF              = ""%6s\n" "$APSNRDIFF dBm" >> $logdir/$controllog
			fi
			if [ "$APSTRONGERSNR" -gt "0" -a "$APCONNECTEDSNR" -gt "0" ]; then
				printf "AP${APSTRONGER} SNR THRESHOLD ADJUSTMENT     = ""%6s\n" "$ADJUST dBm" >> $logdir/$controllog
			fi
			if [ "$SNRDIFF" -gt "-1" ]; then
				printf "AP${APCONNECTED} CUR TO PREV SNR DIFF         = ""%6s\n" "$SNRDIFF dBm" >> $logdir/$controllog
			fi
			if [ "$SNRDIFF" -gt "$MAXSNRDROP" -a "$DEAUTHSTATION" -eq "0" ]; then
				printf "%bAP${APCONNECTED} SNR DIFF                     = GREATER THAN MAX SNR DROP NOT DEAUTHENTICATING!\n" >> $logdir/$controllog
			fi
			if [ "$SNR2DIFF" -gt "-1" ]; then
				printf "AP${APSTRONGER} CUR TO PREV SNR DIFF         = ""%6s\n" "$SNR2DIFF dBm" >> $logdir/$controllog
			fi
			if [ "$SNR2DIFF" -gt "$MAXSNRDIFF" -a "$DEAUTHSTATION" -eq "0" ]; then
				printf "%bAP${APSTRONGER} SNR DIFF                     = GREATER THAN MAX SNR DIFF NOT DEAUTHENTICATING!\n" >> $logdir/$controllog
			fi
		fi


		#### SAVE CURRENT STATION SNR FOR ALL ACCESS POINTS. ####

		COUNT='1'
		while [ "${COUNT}" -le "$APCOUNT" ]
		do
			if [ "${APSNR[${COUNT}]}" -ne "0" ]; then
				echo ${APSNR[${COUNT}]} > $aprdir/AP${COUNT}snr.$STATION
			fi
			COUNT=$(($COUNT+1))
		done

		STATIONCOUNT=$(($STATIONCOUNT-1))
	done

	#### LOG. ####

	if [ "$CONTROLLOG" -eq "1" ]; then
		printf "%b \n" >> $logdir/$controllog
		DATE=`date`
        	printf "%b-------------------- $DATE --------------------\n" >> $logdir/$controllog
		printf "%b \n" >> $logdir/$controllog
	fi

	#### DYNAMICALLY ADJUST SLEEP TIME BASED ON HOW LONG IT TOOK TO EXECUTE.

	ENDTIME=`date +%s`
	EXETIME=$(($ENDTIME-$STARTTIME))
	SLEEPTIME=$(($LOOPTIME-$EXETIME))
	if [ "$SLEEPTIME" -gt "0" ]; then
		sleep $SLEEPTIME
	fi
	MAINCOUNT=$(($MAINCOUNT+1))
done

# Restart ApRoamControl.
ApRoamControl 1 &

exit 0
